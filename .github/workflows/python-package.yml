# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "master", "main", "develop" ]
  pull_request:
    branches: [ "master", "main", "develop" ]

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Cache Poetry virtualenv
      uses: actions/cache@v4
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-lint-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-lint-

    - name: Install dependencies
      run: poetry install --no-interaction --no-root

    - name: Check with black
      run: |
        echo "üîç Checking code formatting with black..."
        poetry run black --check src/ tests/ examples/

    - name: Check with isort
      run: |
        echo "üîç Checking import sorting with isort..."
        poetry run isort --check-only src/ tests/ examples/

    - name: Lint with flake8
      run: |
        echo "üîç Running flake8 linting..."
        # Stop the build if there are Python syntax errors or undefined names
        poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Check all linting rules
        poetry run flake8 . --count --statistics

  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        os: [ubuntu-latest]
        include:
          # Add macOS and Windows testing for latest Python
          - python-version: "3.12"
            os: macos-latest
          - python-version: "3.12"
            os: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry (Unix)
      if: runner.os != 'Windows'
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install Poetry (Windows)
      if: runner.os == 'Windows'
      run: |
        (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -
        $env:PATH += ";$env:APPDATA\Python\Scripts"
        echo "$env:APPDATA\Python\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: pwsh

    - name: Cache Poetry virtualenv
      uses: actions/cache@v4
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        # Python 3.13 may have dependency resolution issues with the lock file
        # Force install pytest and related packages if they're missing
        poetry install --no-interaction --no-root
        if ! poetry run pytest --version 2>/dev/null; then
          echo "pytest not found, installing explicitly..."
          poetry add --group dev pytest pytest-cov pytest-asyncio --no-interaction
        fi

    - name: Install package
      run: poetry install --no-interaction

    - name: Test with pytest
      run: |
        poetry run pytest tests/ \
          --junitxml=junit/test-results-${{ matrix.python-version }}-${{ matrix.os }}.xml \
          --cov=src/eigenda \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          -v

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}-${{ matrix.os }}
        path: junit/test-results-*.xml

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: matrix.python-version == '3.12' && matrix.os == 'ubuntu-latest'
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/

  coverage:
    name: Coverage Report
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Download coverage reports
      uses: actions/download-artifact@v4
      with:
        name: coverage-reports
        path: .

    - name: Display coverage summary
      run: |
        echo "üìä Coverage Summary"
        echo "==================="
        if [ -f coverage.xml ]; then
          python -c "
        import xml.etree.ElementTree as ET
        tree = ET.parse('coverage.xml')
        root = tree.getroot()
        coverage = float(root.attrib.get('line-rate', 0)) * 100
        print(f'Total Coverage: {coverage:.2f}%')
        if coverage >= 90:
            print('‚úÖ Excellent coverage!')
        elif coverage >= 80:
            print('üëç Good coverage')
        elif coverage >= 70:
            print('‚ö†Ô∏è  Coverage could be improved')
        else:
            print('‚ùå Coverage needs improvement')
        "
        fi

    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('coverage.xml')) {
            const xml = fs.readFileSync('coverage.xml', 'utf8');
            const match = xml.match(/line-rate="([0-9.]+)"/);
            if (match) {
              const coverage = (parseFloat(match[1]) * 100).toFixed(2);
              const emoji = coverage >= 90 ? '‚úÖ' : coverage >= 80 ? 'üëç' : coverage >= 70 ? '‚ö†Ô∏è' : '‚ùå';

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## Coverage Report ${emoji}\n\n**Total Coverage: ${coverage}%**\n\nView detailed report in the workflow artifacts.`
              });
            }
          }

  security:
    name: Security Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Cache Poetry virtualenv
      uses: actions/cache@v4
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-security-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-security-

    - name: Install dependencies
      run: poetry install --no-interaction --no-root

    - name: Security check with bandit
      run: |
        poetry run pip install bandit
        poetry run bandit -r src/ -ll -f json -o bandit-report.json || true
        if [ -f bandit-report.json ]; then
          echo "üîí Security Scan Results:"
          poetry run python -c "
        import json
        with open('bandit-report.json') as f:
            data = json.load(f)
            issues = data.get('results', [])
            if not issues:
                print('‚úÖ No security issues found!')
            else:
                print(f'‚ö†Ô∏è  Found {len(issues)} potential security issues')
                for issue in issues[:5]:  # Show first 5
                    print(f\"  - {issue['issue_text']} ({issue['issue_severity']})\")
        "
        fi

    - name: Check for dependency vulnerabilities
      run: |
        poetry run pip install safety
        poetry run safety check --json --output safety-report.json || true
        if [ -f safety-report.json ]; then
          echo "üì¶ Dependency Security Check:"
          poetry run python -c "
        import json
        with open('safety-report.json') as f:
            data = json.load(f)
            if not data:
                print('‚úÖ No known vulnerabilities in dependencies!')
            else:
                print(f'‚ö†Ô∏è  Found {len(data)} dependencies with known vulnerabilities')
        "
        fi

  build:
    name: Build Distribution
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Build package
      run: |
        poetry build
        echo "üì¶ Built packages:"
        ls -la dist/

    - name: Check package with twine
      run: |
        pip install twine
        twine check dist/*
        echo "‚úÖ Package validation passed!"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  summary:
    name: CI Summary
    needs: [lint, test, security, build]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Summary
      run: |
        echo "## üìä CI Pipeline Summary"
        echo ""
        echo "### Job Results:"
        echo "- Lint: ${{ needs.lint.result }}"
        echo "- Test: ${{ needs.test.result }}"
        echo "- Security: ${{ needs.security.result }}"
        echo "- Build: ${{ needs.build.result }}"
        echo ""
        if [ "${{ needs.lint.result }}" == "success" ] && \
           [ "${{ needs.test.result }}" == "success" ] && \
           [ "${{ needs.security.result }}" == "success" ] && \
           [ "${{ needs.build.result }}" == "success" ]; then
          echo "‚úÖ **All checks passed!**"
        else
          echo "‚ùå **Some checks failed. Please review the logs above.**"
          exit 1
        fi
