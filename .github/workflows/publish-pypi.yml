name: Publish to PyPI and TestPyPI

on:
  workflow_run:
    workflows: ["Python package"]
    types: [completed]
    branches:
      - develop
      - master
      - main
  pull_request:
    branches:
      - master
      - main
    types: [opened, synchronize]
  push:
    branches:
      - develop  # Publish to TestPyPI on develop pushes
    tags:
      - 'v*'  # Publish to PyPI on version tags
  release:
    types: [published]  # Trigger when a release is published via GitHub UI
  workflow_dispatch:
    inputs:
      publish_to_testpypi:
        description: 'Publish to TestPyPI'
        required: false
        default: true
        type: boolean
      publish_to_pypi:
        description: 'Publish to PyPI (only works on tags)'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  actions: read  # Required for checking workflow status

jobs:
  # Check if tests have passed when triggered by push to develop
  check-tests:
    name: Check Test Status
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    permissions:
      actions: read
    outputs:
      tests-passed: ${{ steps.check.outputs.conclusion }}
    steps:
      - name: Wait for tests to complete
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            // Initial delay to allow Python package workflow to start
            console.log('Waiting 15 seconds for Python package workflow to initialize...');
            await new Promise(resolve => setTimeout(resolve, 15000));
            
            // Wait up to 5 minutes for the Python package workflow to complete
            const maxAttempts = 30;
            const delay = 10000; // 10 seconds
            
            for (let attempt = 0; attempt < maxAttempts; attempt++) {
              const runs = await github.rest.actions.listWorkflowRunsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'python-package.yml',
                head_sha: context.sha,
                per_page: 5
              });
              
              console.log(`Attempt ${attempt + 1}: Found ${runs.data.workflow_runs.length} workflow runs for SHA ${context.sha}`);
              
              if (runs.data.workflow_runs.length > 0) {
                // Find the Python package workflow run
                const run = runs.data.workflow_runs.find(r => r.name === 'Python package');
                
                if (run) {
                  console.log(`Python package workflow: status=${run.status}, conclusion=${run.conclusion || 'pending'}, id=${run.id}`);
                  
                  if (run.status === 'completed') {
                    if (run.conclusion === 'success') {
                      core.setOutput('conclusion', 'success');
                      console.log('✅ Tests passed successfully!');
                      return;
                    } else {
                      core.setOutput('conclusion', run.conclusion);
                      throw new Error(`❌ Tests failed with status: ${run.conclusion}`);
                    }
                  }
                } else {
                  console.log('Python package workflow not found yet, waiting...');
                }
              } else {
                console.log('No workflow runs found yet for this SHA, waiting...');
              }
              
              if (attempt < maxAttempts - 1) {
                await new Promise(resolve => setTimeout(resolve, delay));
              }
            }
            
            throw new Error('Timeout waiting for tests to complete after 5 minutes');

  # Run tests for PRs only
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install poetry
      run: pipx install poetry
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Run tests
      run: poetry run pytest tests/ -v
    
  build:
    name: Build Distribution Packages
    runs-on: ubuntu-latest
    needs: [test, check-tests]
    if: |
      always() && 
      !contains(needs.*.result, 'failure') && 
      !contains(needs.*.result, 'cancelled') &&
      (github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success')

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for git-based versioning

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install poetry
      run: pipx install poetry

    - name: Set version for TestPyPI
      if: (github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/develop')) && !startsWith(github.ref, 'refs/tags/')
      run: |
        # Get current version from pyproject.toml (specifically from [tool.poetry] section)
        CURRENT_VERSION=$(grep '^version = ' pyproject.toml | head -1 | cut -d'"' -f2)

        # Create appropriate dev version
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          # For PRs, embed PR number at the end of timestamp
          # Format: 0.1.0.dev202507182301220060 (last 4 digits are zero-padded PR number)
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          PR_NUM=$(printf "%04d" ${{ github.event.pull_request.number }})
          DEV_VERSION="${CURRENT_VERSION}.dev${TIMESTAMP}${PR_NUM}"
        else
          # For develop branch pushes
          DEV_VERSION="${CURRENT_VERSION}.dev$(date +%Y%m%d%H%M%S)"
        fi

        echo "Setting version to $DEV_VERSION for TestPyPI"
        # Update version in pyproject.toml
        sed -i.bak "s/^version = \".*\"/version = \"$DEV_VERSION\"/" pyproject.toml
        rm pyproject.toml.bak

    - name: Build package
      run: poetry build

    - name: Check build artifacts
      run: |
        ls -la dist/
        # Verify wheel and sdist were created
        test -f dist/*.whl
        test -f dist/*.tar.gz

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  publish-to-testpypi:
    name: Publish to TestPyPI
    needs: build
    runs-on: ubuntu-latest
    # Publish to TestPyPI on:
    # - Pull requests to master/main branch
    # - Push to develop branch (after tests pass)
    # - Successful workflow_run from develop branch
    # - Manual workflow dispatch with publish_to_testpypi=true
    if: |
      (github.event_name == 'pull_request' && (github.base_ref == 'master' || github.base_ref == 'main')) ||
      (github.event_name == 'push' && github.ref == 'refs/heads/develop') ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.head_branch == 'develop' && github.event.workflow_run.conclusion == 'success') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_testpypi == 'true')

    environment:
      name: testpypi
      url: https://test.pypi.org/p/powerloom-eigenda

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: List distribution files
      run: ls -la dist/

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true  # Skip if version already exists
        verbose: true
        attestations: false  # Disable attestations to avoid Rekor server issues

  publish-to-pypi:
    name: Publish to PyPI
    needs: build
    runs-on: ubuntu-latest
    # Only publish to PyPI on version tags or release events
    if: |
      startsWith(github.ref, 'refs/tags/v') ||
      (github.event_name == 'release' && github.event.action == 'published') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_pypi == 'true' && startsWith(github.ref, 'refs/tags/'))

    environment:
      name: pypi
      url: https://pypi.org/p/powerloom-eigenda

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: List distribution files
      run: ls -la dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true
        # No skip-existing for production PyPI - we want it to fail if version exists
